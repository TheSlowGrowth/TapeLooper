add_executable( libs_algorithm_test_adjacent_find adjacent_find.cpp )
set_target_properties( libs_algorithm_test_adjacent_find PROPERTIES OUTPUT_NAME "adjacent_find" )
add_test( libs_algorithm_test_adjacent_find adjacent_find )
add_executable( libs_algorithm_test_algorithm algorithm.cpp )
set_target_properties( libs_algorithm_test_algorithm PROPERTIES OUTPUT_NAME "algorithm" )
add_test( libs_algorithm_test_algorithm algorithm )
add_executable( libs_algorithm_test_all_of all_of.cpp )
set_target_properties( libs_algorithm_test_all_of PROPERTIES OUTPUT_NAME "all_of" )
add_test( libs_algorithm_test_all_of all_of )
add_executable( libs_algorithm_test_all_of_equal all_of_equal.cpp )
set_target_properties( libs_algorithm_test_all_of_equal PROPERTIES OUTPUT_NAME "all_of_equal" )
add_test( libs_algorithm_test_all_of_equal all_of_equal )
add_executable( libs_algorithm_test_any_of any_of.cpp )
set_target_properties( libs_algorithm_test_any_of PROPERTIES OUTPUT_NAME "any_of" )
add_test( libs_algorithm_test_any_of any_of )
add_executable( libs_algorithm_test_any_of_equal any_of_equal.cpp )
set_target_properties( libs_algorithm_test_any_of_equal PROPERTIES OUTPUT_NAME "any_of_equal" )
add_test( libs_algorithm_test_any_of_equal any_of_equal )
add_executable( libs_algorithm_test_binary_search binary_search.cpp )
set_target_properties( libs_algorithm_test_binary_search PROPERTIES OUTPUT_NAME "binary_search" )
add_test( libs_algorithm_test_binary_search binary_search )
add_executable( libs_algorithm_test_bogo_sort bogo_sort.cpp )
set_target_properties( libs_algorithm_test_bogo_sort PROPERTIES OUTPUT_NAME "bogo_sort" )
add_test( libs_algorithm_test_bogo_sort bogo_sort )
add_executable( libs_algorithm_test_bogo_sort_result bogo_sort_result.cpp )
set_target_properties( libs_algorithm_test_bogo_sort_result PROPERTIES OUTPUT_NAME "bogo_sort_result" )
add_test( libs_algorithm_test_bogo_sort_result bogo_sort_result )
add_executable( libs_algorithm_test_bozo_sort bozo_sort.cpp )
set_target_properties( libs_algorithm_test_bozo_sort PROPERTIES OUTPUT_NAME "bozo_sort" )
add_test( libs_algorithm_test_bozo_sort bozo_sort )
add_executable( libs_algorithm_test_bozo_sort_result bozo_sort_result.cpp )
set_target_properties( libs_algorithm_test_bozo_sort_result PROPERTIES OUTPUT_NAME "bozo_sort_result" )
add_test( libs_algorithm_test_bozo_sort_result bozo_sort_result )
add_executable( libs_algorithm_test_clamp clamp.cpp )
set_target_properties( libs_algorithm_test_clamp PROPERTIES OUTPUT_NAME "clamp" )
add_test( libs_algorithm_test_clamp clamp )
add_executable( libs_algorithm_test_clamp_range clamp_range.cpp )
set_target_properties( libs_algorithm_test_clamp_range PROPERTIES OUTPUT_NAME "clamp_range" )
add_test( libs_algorithm_test_clamp_range clamp_range )
add_executable( libs_algorithm_test_clamp_range_copy clamp_range_copy.cpp )
set_target_properties( libs_algorithm_test_clamp_range_copy PROPERTIES OUTPUT_NAME "clamp_range_copy" )
add_test( libs_algorithm_test_clamp_range_copy clamp_range_copy )
add_executable( libs_algorithm_test_copy copy.cpp )
set_target_properties( libs_algorithm_test_copy PROPERTIES OUTPUT_NAME "copy" )
add_test( libs_algorithm_test_copy copy )
add_executable( libs_algorithm_test_copy_backward copy_backward.cpp )
set_target_properties( libs_algorithm_test_copy_backward PROPERTIES OUTPUT_NAME "copy_backward" )
add_test( libs_algorithm_test_copy_backward copy_backward )
add_executable( libs_algorithm_test_copy_if copy_if.cpp )
set_target_properties( libs_algorithm_test_copy_if PROPERTIES OUTPUT_NAME "copy_if" )
add_test( libs_algorithm_test_copy_if copy_if )
add_executable( libs_algorithm_test_copy_n copy_n.cpp )
set_target_properties( libs_algorithm_test_copy_n PROPERTIES OUTPUT_NAME "copy_n" )
add_test( libs_algorithm_test_copy_n copy_n )
add_executable( libs_algorithm_test_copy_until copy_until.cpp )
set_target_properties( libs_algorithm_test_copy_until PROPERTIES OUTPUT_NAME "copy_until" )
add_test( libs_algorithm_test_copy_until copy_until )
add_executable( libs_algorithm_test_copy_while copy_while.cpp )
set_target_properties( libs_algorithm_test_copy_while PROPERTIES OUTPUT_NAME "copy_while" )
add_test( libs_algorithm_test_copy_while copy_while )
add_executable( libs_algorithm_test_count count.cpp )
set_target_properties( libs_algorithm_test_count PROPERTIES OUTPUT_NAME "count" )
add_test( libs_algorithm_test_count count )
add_executable( libs_algorithm_test_count_if count_if.cpp )
set_target_properties( libs_algorithm_test_count_if PROPERTIES OUTPUT_NAME "count_if" )
add_test( libs_algorithm_test_count_if count_if )
add_executable( libs_algorithm_test_equal equal.cpp )
set_target_properties( libs_algorithm_test_equal PROPERTIES OUTPUT_NAME "equal" )
add_test( libs_algorithm_test_equal equal )
add_executable( libs_algorithm_test_equal_range equal_range.cpp )
set_target_properties( libs_algorithm_test_equal_range PROPERTIES OUTPUT_NAME "equal_range" )
add_test( libs_algorithm_test_equal_range equal_range )
#add_executable( libs_algorithm_test_fill fill.cpp )
#set_target_properties( libs_algorithm_test_fill PROPERTIES OUTPUT_NAME "fill" )
#add_test( libs_algorithm_test_fill fill )
add_executable( libs_algorithm_test_fill_n fill_n.cpp )
set_target_properties( libs_algorithm_test_fill_n PROPERTIES OUTPUT_NAME "fill_n" )
add_test( libs_algorithm_test_fill_n fill_n )
add_executable( libs_algorithm_test_find find.cpp )
set_target_properties( libs_algorithm_test_find PROPERTIES OUTPUT_NAME "find" )
add_test( libs_algorithm_test_find find )
add_executable( libs_algorithm_test_find_end find_end.cpp )
set_target_properties( libs_algorithm_test_find_end PROPERTIES OUTPUT_NAME "find_end" )
add_test( libs_algorithm_test_find_end find_end )
add_executable( libs_algorithm_test_find_first_of find_first_of.cpp )
set_target_properties( libs_algorithm_test_find_first_of PROPERTIES OUTPUT_NAME "find_first_of" )
add_test( libs_algorithm_test_find_first_of find_first_of )
add_executable( libs_algorithm_test_find_if find_if.cpp )
set_target_properties( libs_algorithm_test_find_if PROPERTIES OUTPUT_NAME "find_if" )
add_test( libs_algorithm_test_find_if find_if )
add_executable( libs_algorithm_test_find_if_not find_if_not.cpp )
set_target_properties( libs_algorithm_test_find_if_not PROPERTIES OUTPUT_NAME "find_if_not" )
add_test( libs_algorithm_test_find_if_not find_if_not )
add_executable( libs_algorithm_test_generate generate.cpp )
set_target_properties( libs_algorithm_test_generate PROPERTIES OUTPUT_NAME "generate" )
add_test( libs_algorithm_test_generate generate )
add_executable( libs_algorithm_test_generate_n generate_n.cpp )
set_target_properties( libs_algorithm_test_generate_n PROPERTIES OUTPUT_NAME "generate_n" )
add_test( libs_algorithm_test_generate_n generate_n )
add_executable( libs_algorithm_test_includes includes.cpp )
set_target_properties( libs_algorithm_test_includes PROPERTIES OUTPUT_NAME "includes" )
add_test( libs_algorithm_test_includes includes )
add_executable( libs_algorithm_test_inplace_merge inplace_merge.cpp )
set_target_properties( libs_algorithm_test_inplace_merge PROPERTIES OUTPUT_NAME "inplace_merge" )
add_test( libs_algorithm_test_inplace_merge inplace_merge )
add_executable( libs_algorithm_test_is_decreasing is_decreasing.cpp )
set_target_properties( libs_algorithm_test_is_decreasing PROPERTIES OUTPUT_NAME "is_decreasing" )
add_test( libs_algorithm_test_is_decreasing is_decreasing )
add_executable( libs_algorithm_test_is_heap is_heap.cpp )
set_target_properties( libs_algorithm_test_is_heap PROPERTIES OUTPUT_NAME "is_heap" )
add_test( libs_algorithm_test_is_heap is_heap )
add_executable( libs_algorithm_test_is_heap_until is_heap_until.cpp )
set_target_properties( libs_algorithm_test_is_heap_until PROPERTIES OUTPUT_NAME "is_heap_until" )
add_test( libs_algorithm_test_is_heap_until is_heap_until )
add_executable( libs_algorithm_test_is_increasing is_increasing.cpp )
set_target_properties( libs_algorithm_test_is_increasing PROPERTIES OUTPUT_NAME "is_increasing" )
add_test( libs_algorithm_test_is_increasing is_increasing )
add_executable( libs_algorithm_test_is_partitioned is_partitioned.cpp )
set_target_properties( libs_algorithm_test_is_partitioned PROPERTIES OUTPUT_NAME "is_partitioned" )
add_test( libs_algorithm_test_is_partitioned is_partitioned )
add_executable( libs_algorithm_test_is_permutation is_permutation.cpp )
set_target_properties( libs_algorithm_test_is_permutation PROPERTIES OUTPUT_NAME "is_permutation" )
add_test( libs_algorithm_test_is_permutation is_permutation )
add_executable( libs_algorithm_test_is_sorted is_sorted.cpp )
set_target_properties( libs_algorithm_test_is_sorted PROPERTIES OUTPUT_NAME "is_sorted" )
add_test( libs_algorithm_test_is_sorted is_sorted )
add_executable( libs_algorithm_test_is_sorted_until is_sorted_until.cpp )
set_target_properties( libs_algorithm_test_is_sorted_until PROPERTIES OUTPUT_NAME "is_sorted_until" )
add_test( libs_algorithm_test_is_sorted_until is_sorted_until )
add_executable( libs_algorithm_test_is_strictly_decreasing is_strictly_decreasing.cpp )
set_target_properties( libs_algorithm_test_is_strictly_decreasing PROPERTIES OUTPUT_NAME "is_strictly_decreasing" )
add_test( libs_algorithm_test_is_strictly_decreasing is_strictly_decreasing )
add_executable( libs_algorithm_test_is_strictly_increasing is_strictly_increasing.cpp )
set_target_properties( libs_algorithm_test_is_strictly_increasing PROPERTIES OUTPUT_NAME "is_strictly_increasing" )
add_test( libs_algorithm_test_is_strictly_increasing is_strictly_increasing )
add_executable( libs_algorithm_test_lexicographical_compare lexicographical_compare.cpp )
set_target_properties( libs_algorithm_test_lexicographical_compare PROPERTIES OUTPUT_NAME "lexicographical_compare" )
add_test( libs_algorithm_test_lexicographical_compare lexicographical_compare )
add_executable( libs_algorithm_test_lower_bound lower_bound.cpp )
set_target_properties( libs_algorithm_test_lower_bound PROPERTIES OUTPUT_NAME "lower_bound" )
add_test( libs_algorithm_test_lower_bound lower_bound )
add_executable( libs_algorithm_test_make_heap make_heap.cpp )
set_target_properties( libs_algorithm_test_make_heap PROPERTIES OUTPUT_NAME "make_heap" )
add_test( libs_algorithm_test_make_heap make_heap )
add_executable( libs_algorithm_test_make_partial_heap make_partial_heap.cpp )
set_target_properties( libs_algorithm_test_make_partial_heap PROPERTIES OUTPUT_NAME "make_partial_heap" )
add_test( libs_algorithm_test_make_partial_heap make_partial_heap )
add_executable( libs_algorithm_test_max max.cpp )
set_target_properties( libs_algorithm_test_max PROPERTIES OUTPUT_NAME "max" )
add_test( libs_algorithm_test_max max )
add_executable( libs_algorithm_test_max_element max_element.cpp )
set_target_properties( libs_algorithm_test_max_element PROPERTIES OUTPUT_NAME "max_element" )
add_test( libs_algorithm_test_max_element max_element )
add_executable( libs_algorithm_test_merge merge.cpp )
set_target_properties( libs_algorithm_test_merge PROPERTIES OUTPUT_NAME "merge" )
add_test( libs_algorithm_test_merge merge )
add_executable( libs_algorithm_test_min min.cpp )
set_target_properties( libs_algorithm_test_min PROPERTIES OUTPUT_NAME "min" )
add_test( libs_algorithm_test_min min )
add_executable( libs_algorithm_test_min_element min_element.cpp )
set_target_properties( libs_algorithm_test_min_element PROPERTIES OUTPUT_NAME "min_element" )
add_test( libs_algorithm_test_min_element min_element )
add_executable( libs_algorithm_test_minmax minmax.cpp )
set_target_properties( libs_algorithm_test_minmax PROPERTIES OUTPUT_NAME "minmax" )
add_test( libs_algorithm_test_minmax minmax )
add_executable( libs_algorithm_test_minmax_element minmax_element.cpp )
set_target_properties( libs_algorithm_test_minmax_element PROPERTIES OUTPUT_NAME "minmax_element" )
add_test( libs_algorithm_test_minmax_element minmax_element )
add_executable( libs_algorithm_test_mismatch mismatch.cpp )
set_target_properties( libs_algorithm_test_mismatch PROPERTIES OUTPUT_NAME "mismatch" )
add_test( libs_algorithm_test_mismatch mismatch )
add_executable( libs_algorithm_test_modifying modifying.cpp )
set_target_properties( libs_algorithm_test_modifying PROPERTIES OUTPUT_NAME "modifying" )
add_test( libs_algorithm_test_modifying modifying )
add_executable( libs_algorithm_test_next_permutation next_permutation.cpp )
set_target_properties( libs_algorithm_test_next_permutation PROPERTIES OUTPUT_NAME "next_permutation" )
add_test( libs_algorithm_test_next_permutation next_permutation )
add_executable( libs_algorithm_test_non_modifying non_modifying.cpp )
set_target_properties( libs_algorithm_test_non_modifying PROPERTIES OUTPUT_NAME "non_modifying" )
add_test( libs_algorithm_test_non_modifying non_modifying )
add_executable( libs_algorithm_test_none_of none_of.cpp )
set_target_properties( libs_algorithm_test_none_of PROPERTIES OUTPUT_NAME "none_of" )
add_test( libs_algorithm_test_none_of none_of )
add_executable( libs_algorithm_test_none_of_equal none_of_equal.cpp )
set_target_properties( libs_algorithm_test_none_of_equal PROPERTIES OUTPUT_NAME "none_of_equal" )
add_test( libs_algorithm_test_none_of_equal none_of_equal )
add_executable( libs_algorithm_test_nth_element nth_element.cpp )
set_target_properties( libs_algorithm_test_nth_element PROPERTIES OUTPUT_NAME "nth_element" )
add_test( libs_algorithm_test_nth_element nth_element )
add_executable( libs_algorithm_test_one_of one_of.cpp )
set_target_properties( libs_algorithm_test_one_of PROPERTIES OUTPUT_NAME "one_of" )
add_test( libs_algorithm_test_one_of one_of )
add_executable( libs_algorithm_test_one_of_equal one_of_equal.cpp )
set_target_properties( libs_algorithm_test_one_of_equal PROPERTIES OUTPUT_NAME "one_of_equal" )
add_test( libs_algorithm_test_one_of_equal one_of_equal )
add_executable( libs_algorithm_test_partial_sort partial_sort.cpp )
set_target_properties( libs_algorithm_test_partial_sort PROPERTIES OUTPUT_NAME "partial_sort" )
add_test( libs_algorithm_test_partial_sort partial_sort )
add_executable( libs_algorithm_test_partition partition.cpp )
set_target_properties( libs_algorithm_test_partition PROPERTIES OUTPUT_NAME "partition" )
add_test( libs_algorithm_test_partition partition )
add_executable( libs_algorithm_test_partition_copy partition_copy.cpp )
set_target_properties( libs_algorithm_test_partition_copy PROPERTIES OUTPUT_NAME "partition_copy" )
add_test( libs_algorithm_test_partition_copy partition_copy )
add_executable( libs_algorithm_test_partition_point partition_point.cpp )
set_target_properties( libs_algorithm_test_partition_point PROPERTIES OUTPUT_NAME "partition_point" )
add_test( libs_algorithm_test_partition_point partition_point )
add_executable( libs_algorithm_test_pop_heap pop_heap.cpp )
set_target_properties( libs_algorithm_test_pop_heap PROPERTIES OUTPUT_NAME "pop_heap" )
add_test( libs_algorithm_test_pop_heap pop_heap )
add_executable( libs_algorithm_test_prev_permutation prev_permutation.cpp )
set_target_properties( libs_algorithm_test_prev_permutation PROPERTIES OUTPUT_NAME "prev_permutation" )
add_test( libs_algorithm_test_prev_permutation prev_permutation )
add_executable( libs_algorithm_test_push_heap push_heap.cpp )
set_target_properties( libs_algorithm_test_push_heap PROPERTIES OUTPUT_NAME "push_heap" )
add_test( libs_algorithm_test_push_heap push_heap )
add_executable( libs_algorithm_test_random_swap random_swap.cpp )
set_target_properties( libs_algorithm_test_random_swap PROPERTIES OUTPUT_NAME "random_swap" )
add_test( libs_algorithm_test_random_swap random_swap )
add_executable( libs_algorithm_test_random_swap_result random_swap_result.cpp )
set_target_properties( libs_algorithm_test_random_swap_result PROPERTIES OUTPUT_NAME "random_swap_result" )
add_test( libs_algorithm_test_random_swap_result random_swap_result )
add_executable( libs_algorithm_test_recurrence recurrence.cpp )
set_target_properties( libs_algorithm_test_recurrence PROPERTIES OUTPUT_NAME "recurrence" )
add_test( libs_algorithm_test_recurrence recurrence )
add_executable( libs_algorithm_test_recurrence_n recurrence_n.cpp )
set_target_properties( libs_algorithm_test_recurrence_n PROPERTIES OUTPUT_NAME "recurrence_n" )
add_test( libs_algorithm_test_recurrence_n recurrence_n )
add_executable( libs_algorithm_test_remove remove.cpp )
set_target_properties( libs_algorithm_test_remove PROPERTIES OUTPUT_NAME "remove" )
add_test( libs_algorithm_test_remove remove )
add_executable( libs_algorithm_test_remove_copy remove_copy.cpp )
set_target_properties( libs_algorithm_test_remove_copy PROPERTIES OUTPUT_NAME "remove_copy" )
add_test( libs_algorithm_test_remove_copy remove_copy )
add_executable( libs_algorithm_test_remove_copy_if remove_copy_if.cpp )
set_target_properties( libs_algorithm_test_remove_copy_if PROPERTIES OUTPUT_NAME "remove_copy_if" )
add_test( libs_algorithm_test_remove_copy_if remove_copy_if )
add_executable( libs_algorithm_test_remove_if remove_if.cpp )
set_target_properties( libs_algorithm_test_remove_if PROPERTIES OUTPUT_NAME "remove_if" )
add_test( libs_algorithm_test_remove_if remove_if )
add_executable( libs_algorithm_test_replace replace.cpp )
set_target_properties( libs_algorithm_test_replace PROPERTIES OUTPUT_NAME "replace" )
add_test( libs_algorithm_test_replace replace )
add_executable( libs_algorithm_test_replace_copy replace_copy.cpp )
set_target_properties( libs_algorithm_test_replace_copy PROPERTIES OUTPUT_NAME "replace_copy" )
add_test( libs_algorithm_test_replace_copy replace_copy )
add_executable( libs_algorithm_test_replace_copy_if replace_copy_if.cpp )
set_target_properties( libs_algorithm_test_replace_copy_if PROPERTIES OUTPUT_NAME "replace_copy_if" )
add_test( libs_algorithm_test_replace_copy_if replace_copy_if )
add_executable( libs_algorithm_test_replace_if replace_if.cpp )
set_target_properties( libs_algorithm_test_replace_if PROPERTIES OUTPUT_NAME "replace_if" )
add_test( libs_algorithm_test_replace_if replace_if )
add_executable( libs_algorithm_test_reverse reverse.cpp )
set_target_properties( libs_algorithm_test_reverse PROPERTIES OUTPUT_NAME "reverse" )
add_test( libs_algorithm_test_reverse reverse )
add_executable( libs_algorithm_test_reverse_copy reverse_copy.cpp )
set_target_properties( libs_algorithm_test_reverse_copy PROPERTIES OUTPUT_NAME "reverse_copy" )
add_test( libs_algorithm_test_reverse_copy reverse_copy )
add_executable( libs_algorithm_test_rotate rotate.cpp )
set_target_properties( libs_algorithm_test_rotate PROPERTIES OUTPUT_NAME "rotate" )
add_test( libs_algorithm_test_rotate rotate )
add_executable( libs_algorithm_test_rotate_copy rotate_copy.cpp )
set_target_properties( libs_algorithm_test_rotate_copy PROPERTIES OUTPUT_NAME "rotate_copy" )
add_test( libs_algorithm_test_rotate_copy rotate_copy )
add_executable( libs_algorithm_test_search search.cpp )
set_target_properties( libs_algorithm_test_search PROPERTIES OUTPUT_NAME "search" )
add_test( libs_algorithm_test_search search )
add_executable( libs_algorithm_test_search_n search_n.cpp )
set_target_properties( libs_algorithm_test_search_n PROPERTIES OUTPUT_NAME "search_n" )
add_test( libs_algorithm_test_search_n search_n )
add_executable( libs_algorithm_test_set_difference set_difference.cpp )
set_target_properties( libs_algorithm_test_set_difference PROPERTIES OUTPUT_NAME "set_difference" )
add_test( libs_algorithm_test_set_difference set_difference )
add_executable( libs_algorithm_test_set_intersection set_intersection.cpp )
set_target_properties( libs_algorithm_test_set_intersection PROPERTIES OUTPUT_NAME "set_intersection" )
add_test( libs_algorithm_test_set_intersection set_intersection )
add_executable( libs_algorithm_test_set_symmetric_difference set_symmetric_difference.cpp )
set_target_properties( libs_algorithm_test_set_symmetric_difference PROPERTIES OUTPUT_NAME "set_symmetric_difference" )
add_test( libs_algorithm_test_set_symmetric_difference set_symmetric_difference )
add_executable( libs_algorithm_test_set_union set_union.cpp )
set_target_properties( libs_algorithm_test_set_union PROPERTIES OUTPUT_NAME "set_union" )
add_test( libs_algorithm_test_set_union set_union )
add_executable( libs_algorithm_test_shuffle shuffle.cpp )
set_target_properties( libs_algorithm_test_shuffle PROPERTIES OUTPUT_NAME "shuffle" )
add_test( libs_algorithm_test_shuffle shuffle )
add_executable( libs_algorithm_test_shuffle_result shuffle_result.cpp )
set_target_properties( libs_algorithm_test_shuffle_result PROPERTIES OUTPUT_NAME "shuffle_result" )
add_test( libs_algorithm_test_shuffle_result shuffle_result )
add_executable( libs_algorithm_test_sort sort.cpp )
set_target_properties( libs_algorithm_test_sort PROPERTIES OUTPUT_NAME "sort" )
add_test( libs_algorithm_test_sort sort )
add_executable( libs_algorithm_test_sort_heap sort_heap.cpp )
set_target_properties( libs_algorithm_test_sort_heap PROPERTIES OUTPUT_NAME "sort_heap" )
add_test( libs_algorithm_test_sort_heap sort_heap )
add_executable( libs_algorithm_test_stable_partition stable_partition.cpp )
set_target_properties( libs_algorithm_test_stable_partition PROPERTIES OUTPUT_NAME "stable_partition" )
add_test( libs_algorithm_test_stable_partition stable_partition )
add_executable( libs_algorithm_test_stable_partition_copy stable_partition_copy.cpp )
set_target_properties( libs_algorithm_test_stable_partition_copy PROPERTIES OUTPUT_NAME "stable_partition_copy" )
add_test( libs_algorithm_test_stable_partition_copy stable_partition_copy )
add_executable( libs_algorithm_test_stable_sort stable_sort.cpp )
set_target_properties( libs_algorithm_test_stable_sort PROPERTIES OUTPUT_NAME "stable_sort" )
add_test( libs_algorithm_test_stable_sort stable_sort )
add_executable( libs_algorithm_test_swap_element swap_element.cpp )
set_target_properties( libs_algorithm_test_swap_element PROPERTIES OUTPUT_NAME "swap_element" )
add_test( libs_algorithm_test_swap_element swap_element )
add_executable( libs_algorithm_test_swap_element_copy swap_element_copy.cpp )
set_target_properties( libs_algorithm_test_swap_element_copy PROPERTIES OUTPUT_NAME "swap_element_copy" )
add_test( libs_algorithm_test_swap_element_copy swap_element_copy )
add_executable( libs_algorithm_test_transform transform.cpp )
set_target_properties( libs_algorithm_test_transform PROPERTIES OUTPUT_NAME "transform" )
add_test( libs_algorithm_test_transform transform )
add_executable( libs_algorithm_test_tristate_lexicographical_compare tristate_lexicographical_compare.cpp )
set_target_properties( libs_algorithm_test_tristate_lexicographical_compare PROPERTIES OUTPUT_NAME "tristate_lexicographical_compare" )
add_test( libs_algorithm_test_tristate_lexicographical_compare tristate_lexicographical_compare )
add_executable( libs_algorithm_test_unfold unfold.cpp )
set_target_properties( libs_algorithm_test_unfold PROPERTIES OUTPUT_NAME "unfold" )
add_test( libs_algorithm_test_unfold unfold )
add_executable( libs_algorithm_test_unfold_n unfold_n.cpp )
set_target_properties( libs_algorithm_test_unfold_n PROPERTIES OUTPUT_NAME "unfold_n" )
add_test( libs_algorithm_test_unfold_n unfold_n )
add_executable( libs_algorithm_test_unique unique.cpp )
set_target_properties( libs_algorithm_test_unique PROPERTIES OUTPUT_NAME "unique" )
add_test( libs_algorithm_test_unique unique )
add_executable( libs_algorithm_test_unique_copy unique_copy.cpp )
set_target_properties( libs_algorithm_test_unique_copy PROPERTIES OUTPUT_NAME "unique_copy" )
add_test( libs_algorithm_test_unique_copy unique_copy )
add_executable( libs_algorithm_test_upper_bound upper_bound.cpp )
set_target_properties( libs_algorithm_test_upper_bound PROPERTIES OUTPUT_NAME "upper_bound" )
add_test( libs_algorithm_test_upper_bound upper_bound )
